//建立MySQL连接, 根据自己环境修改相应的数据库信息
// var app = require('http').createServer(handler);
// var io = require('socket.io').listen(app);

var app = require('express')();
var http = require('http').Server(app);
var io = require('socket.io')(http);
var fs = require('fs');
var mysql = require('mysql');
var connectionsArray = [];
var connection = mysql.createConnection({
		host: '127.0.0.1',
		user: 'weijiaoyi',
		password: 'Z53MZ5Dh4nTND0O',
		database: 'weijiaoyi',
		port: 3306
	});
var INTERVAL = 1000;

// 检查数据库连接是否正常
connection.connect(function(err) {
	// 不出现错误信息，那表示数据库连接成功
	console.log(err);
});

//启动HTTP服务，绑定端口3000
// app.listen(3000);
http.listen(3000, function(){
	console.log('listening on *:3000');
});

// 加载客户端首页
/*function handler(req, res) {
	fs.readFile('http://nh0319.com/index.html', function(err, data) {
		if (err) {
			console.log(err);
			res.writeHead(500);
			return res.end('There was an error loading the client home page...');
		}
		res.writeHead(200);
		res.end(data);
	});
}*/

//获取最新当天下单人数和下单量
var get_new_order_user_num = function() {
	var orderNum = 0;
	var userNum = 0;
	// 查询数据库
	var order_sql = "select count(id) as count from js_order where DATE_FORMAT(begin_time, '%Y-%m-%d')=DATE_FORMAT(now(), '%Y-%m-%d')";
	connection.query(order_sql, function(err, rows, fields){
		// if (err) emitSocket(err);
		orderNum = rows[0].count;
		var user_sql = "select id from js_order where DATE_FORMAT(begin_time, '%Y-%m-%d')=DATE_FORMAT(now(), '%Y-%m-%d') group by user_id"
		connection.query(user_sql, function(err, rows, fields){
			// if (err) emitSocket(err);
			userNum = rows.length;
			var list = []; // 用于保存查询结果
			list.push({"orderNum":orderNum, "userNum":userNum});
			// 检查是否有客户端连接，有连接就继续查询数据库
			if (connectionsArray.length) {
				setTimeout(get_new_order_user_num, INTERVAL);
				emitSocket("new_order_user_num",{list: list});
			}
		});
	});
};

function GetRandomNum(Min,Max) {
	var Range = Max - Min;
	var Rand = Math.random();
	return(Min + Math.round(Rand * Range));
}

function CurentTime() { 
	var now = new Date();
	
	var year = now.getFullYear();       //年
	var month = now.getMonth() + 1;     //月
	var day = now.getDate();            //日
	
	var hh = now.getHours();            //时
	var mm = now.getMinutes();          //分
	var ss = now.getSeconds();          //秒
	
	var clock = year + "-";
	if(month < 10)
		clock += "0";
   
	clock += month + "-";
	if(day < 10)
		clock += "0";
	   
	clock += day + " ";
	if(hh < 10)
		clock += "0";
	
	clock += hh + ":";
	if (mm < 10)
		clock += '0';
	
	clock += mm + ":";
	if (ss < 10)
		clock += '0';
	
	clock += ss;
	
	return(clock);
}

// 随机时间向前台发送随机虚拟订单
var sendRandomOrder = function() {
	
	var sql = "select name as play_name, id from js_type where id="+GetRandomNum(1, 5);
	connection.query(sql, function(err, rows, fields){
		var list = []; // 用于保存查询结果
		var min = 1000*60*1;
		var max = 1000*60*5;
		
		var week = new Date().getDay();
		if (null != rows && rows.length > 0) {
			var play_name = rows[0].play_name;
			var play_type = rows[0].id;
			if (week == 6 || week == 0) {
				play_name = "\u6BD4\u7279\u5E01";
				play_type = 3;
			}
			var Minutes = GetRandomNum(min, max);
			
			var type = GetRandomNum(1, 2);
			var order_price_s = [50, 100, 200, 500, 1000, 2000, 5000];
			var order_price = order_price_s[GetRandomNum(0, 6)];
			var begin_time = CurentTime();
			
			sql = 'INSERT INTO js_order_virtual(begin_time,play_type,type,order_price) VALUES(?,?,?,?)';
			var sql_params = [begin_time, play_type, type,order_price];
			connection.query(sql,sql_params);
			
			list.push({"begin_time":begin_time, "name":play_name, "type":type, "order_price":order_price});
			emitSocket("new_order",{list: list});
			
			setTimeout(sendRandomOrder, Minutes);
		}
	});
};

// 监听所有错误信息
process.on('uncaughtException', function(err){
	//打印出错误
  console.log(err);
  //打印出错误的调用栈方便调试
  // console.log(err.stack)；
});
// 创建一个websocket连接，实时更新数据
io.sockets.on('connection', function(socket) {
	// console.log('The current connection client number:' + connectionsArray.length);
	// 有客户端连接的时候才去查询，不然都是浪费资源
	if (!connectionsArray.length) {
		// get_types_max_min_value();
		// get_new_order_user_num();
		
		sendRandomOrder();
		
		// var min = 1000*60*1;
		// var max = 1000*60*5;
		// var Minutes = GetRandomNum(min, max);
		// setTimeout(sendRandomOrder, 1000*60*1);
	}
	socket.on('disconnect', function() {
		var socketIndex = connectionsArray.indexOf(socket);
		// console.log('socket = ' + socketIndex + ' disconnected');
		if (socketIndex >= 0) {
			connectionsArray.splice(socketIndex, 1);
		}
	});
	//监听用户下单
	socket.on('new_order', function(obj){
		var sql = "select name as play_name from js_type where id="+obj.play_type;
		connection.query(sql, function(err, rows, fields){
			var list = []; // 用于保存查询结果
			list.push({"begin_time":obj.begin_time, "name":rows[0].play_name, "type":obj.type, "order_price":obj.order_price});
			emitSocket("new_order",{list: list});
		});
	});
	//监听用户提现
	socket.on('user_withdrawal', function(obj){
		var list = []; // 用于保存查询结果
		emitSocket("user_withdrawal",{list: list});
	});
	//监听用户充值
	socket.on('user_pay', function(obj){
		var list = []; // 用于保存查询结果
		emitSocket("user_pay",{list: list});
	});
	
	//监听用户余额
	socket.on('user_money', function(obj){
		var sql = "select balance from js_user where id="+obj.id;
		connection.query(sql, function(err, rows, fields){
			if (null != rows && rows.length > 0) {
				var list = []; // 用于保存查询结果
				list.push({"money":rows[0].balance, "id":obj.id});
				emitSocket("user_money_"+obj.id,{list: list});
			}
		});
	});
	
	//监听获取当前的最大值和最小值
	socket.on('type_max_min_value', function(obj){
		var sql = "select max(max_value) max_v, min(min_value) min_v from t_data where DATE_FORMAT(datetime, '%Y-%m-%d')=DATE_FORMAT(now(), '%Y-%m-%d') and type = "+obj.type;
		connection.query(sql, function(err, rows, fields){
			if (null != rows && rows.length > 0) {
				var list = []; // 用于保存查询结果
				list.push({"max_v":rows[0].max_v, "min_v":parseFloat(rows[0].min_v).toFixed(2), "type":obj.type});
				emitSocket("type_max_min_value",{list: list});
			}
		});
	});
	
	// console.log('There is a new client connection!!');
	connectionsArray.push(socket);
});

var emitSocket = function(socket_name, data) {
	// 推送最新的更新信息到所以连接到服务器的客户端
	connectionsArray.forEach(function(tmpSocket) {
		tmpSocket.volatile.emit(socket_name, data);
	});
};
